reload tos1             -- .
snap io output
reload stack pointer1	--from here drop
reload stack1
snap tos1
reload stack pointer1
snap null
snap alu
dec
snap stack pointer1

reload stack pointer1   --key	--from here push
snap null
snap alu
inc
snap stack pointer1
reload tos1
snap stack1		--till here push
snap io input
snap tos1

reload memory -- push (continue)
snap tos1

reload tos1 -- <+- and or
reload stack1
snap alu
FORM OPERATION HERE
snap flags
snap tos1
reload stack pointer1
snap null
snap alu
dec
snap stack pointer1

snap null --if
reload tos1
snap alu
do or
snap flags

else
-
then
-

reload stack pointer2 --do
snap null
snap alu
inc
snap stack pointer2
reload stack1
snap stack2
reload tos1
snap tos2
2 TIMES POP
reload stack pointer2	--continue of "loop"
reload stack2
reload tos2
snap alu
do <
snap flags

reload tos2 --loop
snap null
snap alu
inc
snap tos2

variable		--returns free memory address
PUSH

reload stack pointer1 --!
snap stack1
snap tos1
snap memory

reload stack pointer2 --swap
snap null
snap alu
inc
snap stack pointer2
reload tos2
snap stack2
reload tos1
snap tos2
reload stack pointer2
snap null
snap alu
inc
snap stack pointer2
reload tos2
snap stack2
reload stack pointer2
snap null
snap alu
inc
snap stack pointer2
reload stack1
snap stack2
snap tos2
snap tos1
reload stack pointer2
snap null
snap alu
dec
snap stack pointer2
reload stack2
snap stack1
reload stack pointer2
snap null
snap alu
dec
snap stack pointer2
snap tos2
reload stack pointer2
snap null
snap alu
dec
snap stack pointer2

reload stack pointer1 -- ?
snap null
snap alu
inc
snap stack pointer1
reload tos1
snap stack1
snap memory
snap tos1

